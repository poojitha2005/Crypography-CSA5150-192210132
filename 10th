#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

// Function to prepare the key table
void prepareKeyTable(char keyTable[SIZE][SIZE]) {
    char key[] = "MFHIJKUNOPQZVWXYELARGDSTBC";
    int i, j, k = 0;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            keyTable[i][j] = key[k++];
        }
    }
}

// Function to search for characters in the key table and return their positions
void search(char keyTable[SIZE][SIZE], char a, char b, int pos[]) {
    int i, j;
    if (a == 'J') a = 'I';
    if (b == 'J') b = 'I';
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (keyTable[i][j] == a) {
                pos[0] = i;
                pos[1] = j;
            }
            if (keyTable[i][j] == b) {
                pos[2] = i;
                pos[3] = j;
            }
        }
    }
}

// Function to process the plaintext to fit Playfair cipher rules
void processPlainText(char str[], char processed[]) {
    int i, j = 0;
    for (i = 0; i < strlen(str); i++) {
        if (isalpha(str[i])) {
            processed[j++] = toupper(str[i]);
        }
    }
    processed[j] = '\0';

    // Insert 'X' between duplicate letters and at the end if necessary
    int len = strlen(processed);
    for (i = 0; i < len; i += 2) {
        if (processed[i] == processed[i + 1]) {
            for (j = len; j > i; j--) {
                processed[j] = processed[j - 1];
            }
            processed[i + 1] = 'X';
            len++;
        }
    }
    if (len % 2 != 0) {
        processed[len++] = 'X';
        processed[len] = '\0';
    }
}

// Function to encrypt the plaintext using the Playfair cipher
void encrypt(char keyTable[SIZE][SIZE], char str[], char encrypted[]) {
    int i, a, b, c, d, pos[4];
    for (i = 0; i < strlen(str); i += 2) {
        search(keyTable, str[i], str[i + 1], pos);
        if (pos[0] == pos[2]) {
            // Same row
            a = pos[0];
            b = (pos[1] + 1) % SIZE;
            c = pos[2];
            d = (pos[3] + 1) % SIZE;
        } else if (pos[1] == pos[3]) {
            // Same column
            a = (pos[0] + 1) % SIZE;
            b = pos[1];
            c = (pos[2] + 1) % SIZE;
            d = pos[3];
        } else {
            // Rectangle
            a = pos[0];
            b = pos[3];
            c = pos[2];
            d = pos[1];
        }
        encrypted[i] = keyTable[a][b];
        encrypted[i + 1] = keyTable[c][d];
    }
    encrypted[i] = '\0';
}

int main() {
    char keyTable[SIZE][SIZE];
    char plaintext[] = "Must see you over Cadogan West. Coming at once.";
    char processed[100];
    char encrypted[100];

    prepareKeyTable(keyTable);
    processPlainText(plaintext, processed);
    encrypt(keyTable, processed, encrypted);

    printf("Processed plaintext: %s\n", processed);
    printf("Encrypted message: %s\n", encrypted);

    return 0;
}
