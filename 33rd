#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <openssl/des.h>

#define BLOCK_SIZE 8

// Function to handle errors
void handleErrors() {
    printf("Error occurred\n");
    exit(1);
}

// Function to perform DES encryption
void des_encrypt(const unsigned char *plaintext, const unsigned char *key, unsigned char *ciphertext, int length) {
    DES_key_schedule key_schedule;
    DES_set_key((const_DES_cblock *)key, &key_schedule);

    for (int i = 0; i < length; i += BLOCK_SIZE) {
        DES_ecb_encrypt((const_DES_cblock *)(plaintext + i), (DES_cblock *)(ciphertext + i), &key_schedule, DES_ENCRYPT);
    }
}

// Function to perform DES decryption
void des_decrypt(const unsigned char *ciphertext, const unsigned char *key, unsigned char *plaintext, int length) {
    DES_key_schedule key_schedule;
    DES_set_key((const_DES_cblock *)key, &key_schedule);

    for (int i = 0; i < length; i += BLOCK_SIZE) {
        DES_ecb_encrypt((const_DES_cblock *)(ciphertext + i), (DES_cblock *)(plaintext + i), &key_schedule, DES_DECRYPT);
    }
}

int main() {
    unsigned char plaintext[] = "Hello World!";
    unsigned char key[8] = {0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef}; // 56-bit key
    int len = strlen((char *)plaintext);
    int padding = BLOCK_SIZE - (len % BLOCK_SIZE);
    int padded_len = len + padding;
    
    unsigned char padded_plaintext[padded_len];
    unsigned char ciphertext[padded_len];
    unsigned char decrypted_text[padded_len];

    // Ensure the plaintext is padded to a multiple of 8 bytes (64 bits)
    memcpy(padded_plaintext, plaintext, len);
    memset(padded_plaintext + len, padding, padding);

    // Perform DES encryption
    des_encrypt(padded_plaintext, key, ciphertext, padded_len);

    // Display ciphertext
    printf("Ciphertext: ");
    for (int i = 0; i < padded_len; i++) {
        printf("%02x", ciphertext[i]);
    }
    printf("\n");

    // Perform DES decryption
    des_decrypt(ciphertext, key, decrypted_text, padded_len);

    // Remove padding from decrypted text
    int pad = decrypted_text[padded_len - 1];
    decrypted_text[padded_len - pad] = '\0';
    
    printf("Decrypted Text: %s\n", (char *)decrypted_text);

    return 0;
}
